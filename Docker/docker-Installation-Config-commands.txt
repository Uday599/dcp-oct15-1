VM -> will have os -> hypervisor -> each differecnt os -> application

Containers 

we dont have different OS's here , only underlying main OS will be used to run application 
Here we have entity called 'Docker' like hypervisor in VMs

*  Container runtime environment -> docker

each service in docker will have its own tree directory structure , hence making sure that it is isolated from other servcies

Hypervisor is for physical hardware virtualization.

Docker Daemon 
docker group   - /etc/group  = to add user , by default only root can run docker


[root@ip-172-31-1-219 ~]# docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
2db29710123e: Pull complete
Digest: sha256:faa03e786c97f07ef34423fccceeec2398ec8a5759259f94d99078f264e9d7af
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    1  yum install docker
    2  systemctl status docker
    3  systemctl start docker
    4  systemctl enable docker
    5  systemctl status docker
    6  clear
    7  docket ps
    8  docker ps
    9  which docker
   10  cd container_id
   11  clear
   12  docker ps
   13  docker images
   14  docker pull centos
   15  docker images
   16  docker ps
   17  dockerclear
   18  clear
   19  docker inmages
   20  docker inmage
   21  docker images
   22  docker run centos
   23  docker ps
   24  docker ps -a
   25  docker run nginx
   26  docker pull loksaieta/loksaimvndevops:v1.0
   27  docker images
   28  docker run -it loksaieta/loksaimvndevops bash
   29  docker --version
   30  docker run hello-world
   31  clear
   32  docker images
   33  docker ps
   34  docker ps -a
   35  history
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Docker hub - registry for docker images



#Docker Installation | Configuration | Commands & Concepts:


image = class

containers  = objects to call class(image)
dependencies and all will be there in containers
Registry - place where you store docker images
you can host your own registry / docker hub

sudo yum install docker


yum install docker -y
docker version
systemctl status docker
systemctl start docker
systemctl status docker
systemctl enable docker





#Basic Docker Commands :

#goto : https://hub.docker.com/

#Test Docker with basic hello-world image from docker hub.


 # by default lates tag will be pulled if not you can mention the required tag to download
docker pull centos 

docker run centos 

docker run centos
docker run nginx

docker pull hello-world
docker pull docker/whalesay


docker images

docker run centos

docker ps     --> this is used to get running containers
docker ps -a    --> this is used to get list of containes - running/stopped/exited etc...

### Run Container in Interactive Mode:
###docker run -it --name=testvol1 centos bash
docker run -it centos bash

i -> interactive mode
t -> in termainal

docker run -it <images> bash

root@a0303e44cb9e:/usr/local/tomcat#

root@<container_id): interactive mode


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
docker pull loksaieta/loksaimvndevops:v1.0

cat /etc/*release*

### Print the Docker Centos Image Release Info.
dockerpath# cat /etc/*release*
dockerpath# exit

###Run Docker Container in DETACHED MODE : we can gain access to terminal
docker run -d centos sleep 20 
docker ps -a

###Run Docker Container in FOREGROUND MODE :
docker run centos sleep 20
docker ps -a

docker run -d centos sleep 200
docker stop <container_id>

docker rm 2c5b 1b4f

docker images
docker rmi <image_id>

### Before deleting image, ensure that it is not referenced to any container. 
### In it is mapped, delete the container first, then can re container image.

docker rmi -f hello-world

docker pull centos:centos7.9.2009

docker run centos sleep 1100

docker stop <container_id>
docker rm <contained_ip>

docket rmi <imaged_id>  - to remove the image from local machine

### Detached Mode
docker run -d centos sleep 2000

docker attach <running_container_id>  -- to attach , default
docker stop <container_id>

###docker pull timer

#docker pull jenkins

#docker run jenkins

docker inspect <container_id>   -- to get details of containers

docker history <imagename>

docker run tomcat 

### Port-Mapping / Port-Binding

goto hub.docker & search for tomcat

docker run -it -p 8088:8080 tomcat:8.0

#### -p host_port:container_port

Once you install tomcat on ur vm :

<public_ip>:8088


###Docker Logs
~~~~~~~~~~~~~~~~~~~~~~~

docker logs <container_id>

#Access Docker contents using exec - Non-Interactive Mode: 

docker exec < container_id> <bash_command>

docker exec e8553a4721d5 cat /etc/hosts

#Login to Docker Container using exec in Interactive Mode: (Using Container Name) 

docker exec -it <container_name-gallant_blackburn> bash

#Run Docker Image in Interactive Mode: (Using Image Name) 

docker run -it centos bash
dockerpath# cat /etc/*release*
dockerpath# exit
