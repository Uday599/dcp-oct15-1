
TERRAFORM
---------

> Provision of Infra(servers) and configuring it
> IAC infra as Code - tool

C-Developement
C-Integration
    testing  QA,UAT
    500 micrroservices
    IAC - Terraform - write the scripts to provision all these 500+ servers dynamically
    configure the servers using Ansible
    Build
    create Artifacts
    testing the Artifacts
    Destroy all the test servers
    
C-Delivery/Deployment
==========================================================

Quiz:

1. Terrafrom is Iac
2. Terraform is written in Golang
3. this uses -Providers to interact with remote nodes
4. Terraform uses declarative configuration to define there state list
5. Terraform supports almost all providers
6. Terraform is Cloud Agnostic? Yes, Terraform is cloud agnostic, in the sense that it can be used to run on almost every cloud provider there is.
7. configuration file will be in .tf extension
8. What flag can be used with the destroy command to delete a selected resource? -target
9. What is the purpose of the Terraform state file? Records all changes made by configuration to the state
10. What is the purpose of the terraform init command? Initialize the provider required to run configurations in curent directory

---------------------------
Declarative:

Terraform -> HashiCorp language -> keyvalue pair -> HCL
Ansible - YAML

Managed service:
----------------

AWS: Cloud formation template -: json

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=

" We basically install Terraform in our local machine , becuase using a server to provison another server is meaningless."

for windows use chocolaty
> run powershell in administrator mode
> choco install terraform

website: https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli

Install Terraform --> Local Windows Machine!!!
Set env variable for Terraform to run terraform from CLI

> choco install awscli
> Create IAM Uer with Adminsitrator access, get access key and Secrets key
> in Powershell, run aws configure
> Provide access key and Secrets key generated
> And we are done :)
> you can create Config.tf file in VS Code and save the file in desired path, and run the config file from Powershell.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

test.tf
-------

provider "aws" {                                                 # provider is important
  region     = "ap-south-1"
      # Account -> security crendentials -> secret key -> create -> download .csv
}

# Create AWS Instance

resource "aws_instance" "dev_server1" {     # resource "type of resource" "name of resource"
  ami           = "ami-0cca134ec43cf708f"   # AMI Id
  instance_type = "t2.micro"                # type
  key_name      = "Dec5"            # key name
  vpc_security_group_ids = ["sg-0c2e1a30f04dfe09c"]
  tags = {
    Name = "TerraformDemoServer1"           # Tag , Also name of resource
  }
}


> Navigate to file path in Power shell

PS C:\Users\udayp\Desktop> cd Terraform-exercise
PS C:\Users\udayp\Desktop\Terraform-exercise> ls


    Directory: C:\Users\udayp\Desktop\Terraform-exercise


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        30-12-2022  12:59 PM              0 first.tf

> terraform init            # can run in gitbash aswell, we are currently running in terraform
> terraform validate
> terrafrom  fmt
> terraform plan
> terraform apply 
> can check instance created in AWS

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        30-12-2022  01:04 PM                .terraform
-a----        30-12-2022  01:04 PM           1377 .terraform.lock.hcl
-a----        30-12-2022  01:06 PM            596 first.tf
-a----        30-12-2022  01:09 PM           4480 terraform.tfstate        # this as all state related to Instance

> terraform destroy
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=

How to access terraform installed:
---------------------------------


1. Use Command prompt to run Terraform commands like : terraform init, terraform plan, terraform apply, etc..



2. Visual Studio Code  to create or develop Terraform Config files! i.e., *.tf files  (recommended)
  Place or create file -> save in particular folder -> click on terminal -> navigate to file path -> execute teraform commands
  But while using VS COde , we should have provide - Access Key and Secrets , which is not safe, we already suffered.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


For config file formatting and all we have defined in the documentaltion itself :

https://registry.terraform.io/browse/providers

==================================================================================================================================
Very important ready format for config file : https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance
==================================================================================================================================


1. excersice1.tf
=================


provider "aws" {                                                 # provider is important
  region     = "ap-south-1"
  access_key = "AKIAXWCBTXTUAU5HPIPU"                            # access key and secret key generated from IAM AWS Console
  secret_key = "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"        # Account -> security crendentials -> secret key -> create -> download .csv
}

# Create AWS Instance

resource "aws_instance" "dev_server1" {     # resource "type of resource" "name of resource"
  ami           = "ami-074dc0a6f6c764218"   # AMI Id
  instance_type = "t2.micro"                # type
  key_name      = "uday-aws-key"            # key name

  tags = {
    Name = "TerraformDemoServer1"           # Tag , Also name of resource
  }
}

# Create AWS Instance

resource "aws_instance" "app_server2" {
  ami           = "ami-074dc0a6f6c764218"
  instance_type = "t2.micro"
  key_name      = "kubeserverkey"

  tags = {
    Name = "TerraformDemoServer2"
  }
}


 Plan STATUS:
------------

+ => Add new resource
~ => update any existing resource
- => Delete any existing resource

1. terraform init    -> to initialize Terraform , done once

2. terraform validate -> check syntaxs

PS C:\Users\udayp\Desktop\Terraform_exercise\excercise2> terraform validate
Success! The configuration is valid.


3. terraform fmt  -> will properly format the terraform file

3. terraform plan   -> to check what its config file going to do?

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 + resource "aws_instance" "dev_server1" {
      + ami                                  = "ami-074dc0a6f6c764218"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "uday-aws-key"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "TerraformDemoServer1"
        }
      + tags_all                             = {
          + "Name" = "TerraformDemoServer1"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id                 = (known after apply)
              + capacity_reservation_resource_group_arn = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + maintenance_options {
          + auto_recovery = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_card_index    = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + private_dns_name_options {
          + enable_resource_name_dns_a_record    = (known after apply)
          + enable_resource_name_dns_aaaa_record = (known after apply)
          + hostname_type                        = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.
+++++++++++++++++++++++++++++++++++++++++++++++++++

4. terraform apply   -> this will creates infra

5. terraform destroy   -> this will destroy entire state list from target machine

terraform state list   -> gives the list of resources created , terraform plan uses this data to check if there is any change happened or not
 
terraform destroy -target aws_instance.app_server1   -> to delete/destroy any particular resources,

terraform state show aws_instance.app_server2   -> detailed list about state/resource, store's as state

terraform state rm aws_instance.app_server2    -> to remove entry from state file -> and to avoid tracking any resources


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2. Excercise2.tf
=================


provider "aws" {
  region     = "ap-south-1"
  access_key = "AKIAZCQ3W3FGSD2SSWMB"
  secret_key = "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"
}

# Create VPC

resource "aws_vpc" "myvpc1" {
  cidr_block       = "10.0.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "myvpc1"
  }
}

# Create Subnet 

resource "aws_subnet" "mysubnet1" {
  vpc_id     = aws_vpc.myvpc1.id
  cidr_block = "10.0.1.0/24"

  tags = {
    Name = "mysubnet1"
  }
}

# Internet Gateway

resource "aws_internet_gateway" "mygw1" {
  vpc_id = aws_vpc.myvpc1.id

  tags = {
    Name = "mygw1"
  }
}

# Route Table

resource "aws_route_table" "myrt1" {
  vpc_id = aws_vpc.myvpc1.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.mygw1.id
  }

  tags = {
    Name = "myrt1"
  }
}

# Rout Table Association

resource "aws_route_table_association" "myrta1" {
  subnet_id      = aws_subnet.mysubnet1.id
  route_table_id = aws_route_table.myrt1.id
}

# Security Groups

resource "aws_security_group" "mysg1" {
  name        = "mysg1"
  description = "Allow inbound traffic"
  vpc_id      = aws_vpc.myvpc1.id

  ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "mysg1"
  }
}

# Create Instance

resource "aws_instance" "App_server1" {
  ami           = "ami-074dc0a6f6c764218"
  instance_type = "t2.micro"
  associate_public_ip_address = true
  subnet_id = aws_subnet.mysubnet1.id
  vpc_security_group_ids = [aws_security_group.mysg1.id]
  key_name = "Loksai-aws-key"

  tags = {
    Name = "Terraform-Server"
  }
}


  
terraform --version
terraform init
terraform plan
terraform apply


++++++++++++++++++++++++++++++++++++++++++++++++++++++

3. exercise 3 - Variable -Udemy
===============================

Crete a folder ,  push all this related files into one folder and then use terraform command

> terraform init   -> initialize state file
> plan   -> this will tell what action is going to be performed
> apply


provider.tf
-----------

provider "aws" {
  region = var.REGION
}

excerciee.tf
-------------

resource "aws_instance" "dove-inst" {
  ami                    = var.AMIS[var.REGION]    # like AMIS[REGION] will be pulled
  instance_type          = "t2.micro"
  availability_zone      = var.ZONE1
  key_name               = "uday-aws-key"
  vpc_security_group_ids = ["sg-0c503e902c3832768"]
  tags = {
    Name    = "Dove-Instance"
    Project = "Dove"
  }
}


var.tf
------

variable REGION {
  default = "ap-south-1"
}

variable ZONE1 {
  default = "ap-south-1a"
}

variable AMIS {
  type = map
  default = {
    ap-south-2 = "ami-074f102f7cbc99d2f"
    ap-south-1 = "ami-074dc0a6f6c764218"
  }
}

PS C:\Users\udayp\Desktop\Terraform_exercise\excercise2> terraform state list   -> gives the list of resources created

aws_instance.dove-inst


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=

4. Excercise4 - Provisioner - udemy
===================================

> use provisioner to setup softeares and files like file uploads and remote execution
> provisioner requires Connection details.
> we have more provisioners, we used file and remote-exec in our example


login to powershell
install aws-cli
commands:
aws configure -> newdovekey
ssh-keygen -> provide file name
public and private key files will be stored in local machine , this keys will be used for instance,


Provider.tf
-----------

provider "aws" {
  region = var.REGION
}



Var.tf- defining variables
------


variable REGION {
  default = "us-east-2"
}

variable ZONE1 {
  default = "us-east-2a"
}

variable AMIS {
  type = map
  default = {
    us-east-2 = "ami-03657b56516ab7912"
    us-east-1 = "ami-0947d2ba12ee1ff75"
  }
}

variable USER {
  default = "ec2-user"
}

web.sh  -> user data
------
> we are using user data to configure our instance and a sample webapp is loaded here.

#!/bin/bash
yum install wget unzip httpd -y
systemctl start httpd
systemctl enable httpd
wget https://www.tooplate.com/zip-templates/2117_infinite_loop.zip  -> sample website template
unzip -o 2117_infinite_loop.zip
cp -r 2117_infinite_loop/* /var/www/html/
systemctl restart httpd



Instance.tf and keypair creation
--------------------------------

resource "aws_key_pair" "dove-key" {                            # we are creating a new key pair "newdovekey"
  key_name   = "newdovekey"
  public_key = file("newdovekey.pub")                           # passing public key through file, we can hardcode paste aswell
}

resource "aws_instance" "dove-inst" {
  ami                    = var.AMIS[var.REGION]
  instance_type          = "t2.micro"
  availability_zone      = var.ZONE1
  key_name               = aws_key_pair.dove-key.key_name        #  Resource_Type.Resource_Name.Attribute_Name
  vpc_security_group_ids = ["sg-079caf48f071e10e3"]              #  this SG should have SSH -> port 22 and HTTP -> port 80
  tags = {
    Name    = "Dove-Instance"
    Project = "Dove"
  }

  provisioner "file" {                                            # calling  web.ssh file using "provisioner"
    source      = "web.sh"
    destination = "/tmp/web.sh"   
  }

  provisioner "remote-exec" {                                     # remote login and execution to our intance using "provisioner"

    inline = [
      "chmod +x /tmp/web.sh",
      "sudo /tmp/web.sh"
    ]
  }

  connection {                                                     # remote login with user name , private key and public ip
    user        = var.USER
    private_key = file("newdovekey")
    host        = self.public_ip
  }
}                                                                 #  Instance defination ends here


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

EXCERCISE-4-udemy - Output
==========================

> to print attribute to console
> data is pulled from state file


provider.tf
-----------

provider "aws" {
  region = var.REGION
  access_key = "AKIAXWCBTXTUAG44N36E"
  secret_key = "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"
}


varr.tf
-------

variable REGION {
  default = "us-east-2"
}

variable ZONE1 {
  default = "us-east-2a"
}

variable AMIS {
  type = map
  default = {
    us-east-2 = "ami-03657b56516ab7912"
    us-east-1 = "ami-0947d2ba12ee1ff75"
  }
}

variable USER {
  default = "ec2-user"
}


web.sh
------

#!/bin/bash
yum install wget unzip httpd -y
systemctl start httpd
systemctl enable httpd
wget https://www.tooplate.com/zip-templates/2117_infinite_loop.zip
unzip -o 2117_infinite_loop.zip
cp -r 2117_infinite_loop/* /var/www/html/
systemctl restart httpd


instance.tf
-----------

resource "aws_key_pair" "dove-key" {
  key_name   = "newdovekey"
  public_key = file("newdovekey.pub")
}

resource "aws_instance" "dove-inst" {
  ami                    = var.AMIS[var.REGION]
  instance_type          = "t2.micro"
  availability_zone      = var.ZONE1
  key_name               = aws_key_pair.dove-key.key_name
  vpc_security_group_ids = ["sg-079caf48f071e10e3"]
  tags = {
    Name    = "Dove-Instance"
    Project = "Dove"
  }

  provisioner "file" {
    source      = "web.sh"
    destination = "/tmp/web.sh"
  }

  provisioner "remote-exec" {

    inline = [
      "chmod +x /tmp/web.sh",
      "sudo /tmp/web.sh"
    ]
  }

  connection {
    user        = var.USER
    private_key = file("newdovekey")
    host        = self.public_ip
  }
} 
output "PublicIP" {                                         # Output is used to print required key value to console
  value = aws_instance.dove-inst.public_ip                  # resource_type.resource_name.Attribute(key/parameter)
}

output "PrivateIP" {
  value = aws_instance.dove-inst.private_ip
}

>>>>> After terraform apply :

            Apply complete! Resources: 1 added, 0 changed, 0 destroyed.

Outputs:

PrivateIP = "172.31.2.176"
PublicIP = "18.119.120.226"



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

EXCERCISE:5 Udemy - working with backend
----------------------------------------

" this function is used to push state file to central S3 repository"

backend.tf
----------

> we will first create a bucket in AWS with Bucket name and folder

terraform {
  backend "s3" {
    bucket = "terra-stove-dove"                     # bucket name 
    key    = "terraform/backend"                    # path where state file will be pushed, its a folder inside buncket
    region = "us-east-2"                            # region where you created S3 earlier
  }
}


Provider.tf
-----------

provider "aws" {
  region = var.REGION
}


var.tf
------

variable REGION {
  default = "us-east-2"
}

variable ZONE1 {
  default = "us-east-2a"
}

variable AMIS {
  type = map
  default = {
    us-east-2 = "ami-03657b56516ab7912"
    us-east-1 = "ami-0947d2ba12ee1ff75"
  }
}

variable USER {
  default = "ec2-user"
}


web.sh
------

#!/bin/bash
yum install wget unzip httpd -y
systemctl start httpd
systemctl enable httpd
wget https://www.tooplate.com/zip-templates/2117_infinite_loop.zip
unzip -o 2117_infinite_loop.zip
cp -r 2117_infinite_loop/* /var/www/html/
systemctl restart httpd


instance.tf
-----------


resource "aws_key_pair" "dove-key" {
  key_name   = "newdovekey"
  public_key = file("newdovekey.pub")
}

resource "aws_instance" "dove-inst" {
  ami                    = var.AMIS[var.REGION]
  instance_type          = "t2.micro"
  availability_zone      = var.ZONE1
  key_name               = aws_key_pair.dove-key.key_name
  vpc_security_group_ids = ["sg-079caf48f071e10e3"]
  tags = {
    Name    = "Dove-Instance"
    Project = "Dove"
  }

  provisioner "file" {
    source      = "web.sh"
    destination = "/tmp/web.sh"
  }

  provisioner "remote-exec" {

    inline = [
      "chmod +x /tmp/web.sh",
      "sudo /tmp/web.sh"
    ]
  }

  connection {
    user        = var.USER
    private_key = file("newdovekey")
    host        = self.public_ip
  }
} 
output "PublicIP" {                                         -> Output is used to print required key value to console
  value = aws_instance.dove-inst.public_ip                  -> resource_type.resource_name.key/parameter
}

output "PrivateIP" {
  value = aws_instance.dove-inst.private_ip
}


Commands:

terraform --version
terraform validate
terraform init
------------->
PS C:\Users\udayp\Desktop\Terraform_exercise\excercise-provision> terraform init -reconfigure

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically   -> this message will receive 
use this backend unless the backend configuration changes.
-------------->

terraform fmt -> to format
terraform plan
terraform apply

-------------->
Apply complete! Resources: 2 added, 0 changed, 0 destroyed.

Outputs:

PrivateIP = "172.31.9.252"
PublicIP = "3.142.36.210"
------------->


==========================

TO COMMUNICATE BETWEEN DIFFERENT RESOURCES:

AWS_Resource_Type.Resource_Name.key/Parameter

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Excersie-6 = udemy - Multi Resource
-----------------------------------

Create a folder and add below files:

1. provider.tf
--------------


provider "aws" {
  region = var.REGION
}


2.vpc.tf
-------
# Refer official documentation


resource "aws_vpc" "dove" {
  cidr_block           = "10.0.0.0/16"
  instance_tenancy     = "default"
  enable_dns_support   = "true"
  enable_dns_hostnames = "true"
  tags = {
    Name = "dove-vpc"
  }
}

resource "aws_subnet" "dove-pub-1" {
  vpc_id                  = aws_vpc.dove.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE1
  tags = {
    Name = "dove-pub-1"
  }
}

resource "aws_subnet" "dove-pub-2" {
  vpc_id                  = aws_vpc.dove.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE2
  tags = {
    Name = "dove-pub-2"
  }
}


resource "aws_subnet" "dove-pub-3" {
  vpc_id                  = aws_vpc.dove.id
  cidr_block              = "10.0.3.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE3
  tags = {
    Name = "dove-pub-3"
  }
}


resource "aws_subnet" "dove-priv-1" {
  vpc_id                  = aws_vpc.dove.id
  cidr_block              = "10.0.4.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE1
  tags = {
    Name = "dove-priv-1"
  }
}


resource "aws_subnet" "dove-priv-2" {
  vpc_id                  = aws_vpc.dove.id
  cidr_block              = "10.0.5.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE2
  tags = {
    Name = "dove-priv-2"
  }
}


resource "aws_subnet" "dove-priv-3" {
  vpc_id                  = aws_vpc.dove.id
  cidr_block              = "10.0.6.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = var.ZONE3
  tags = {
    Name = "dove-priv-3"
  }
}

resource "aws_internet_gateway" "dove-IGW" {
  vpc_id = aws_vpc.dove.id
  tags = {
    Name = "dove-IGW"
  }
}

resource "aws_route_table" "dove-pub-RT" {
  vpc_id = aws_vpc.dove.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.dove-IGW.id
  }

  tags = {
    Name = "dove-pub-RT"
  }
}


resource "aws_route_table_association" "dove-pub-1-a" {
  subnet_id      = aws_subnet.dove-pub-1.id
  route_table_id = aws_route_table.dove-pub-RT.id
}

resource "aws_route_table_association" "dove-pub-2-a" {
  subnet_id      = aws_subnet.dove-pub-2.id
  route_table_id = aws_route_table.dove-pub-RT.id
}
resource "aws_route_table_association" "dove-pub-3-a" {
  subnet_id      = aws_subnet.dove-pub-3.id
  route_table_id = aws_route_table.dove-pub-RT.id
}




3. var.tf
 ---------
 
 variable REGION {
  default = "us-east-2"
}

variable ZONE1 {
  default = "us-east-2a"
}

variable ZONE2 {
  default = "us-east-2b"
}

variable ZONE3 {
  default = "us-east-2c"
}

variable AMIS {
  type = map
  default = {
    us-east-2 = "ami-03657b56516ab7912"
    us-east-1 = "ami-0947d2ba12ee1ff75"
  }
}

variable USER {
  default = "ec2-user"
}

variable PUB_KEY {
  default = "dovekey.pub"
}

variable PRIV_KEY {
  default = "dovekey"
}

variable MYIP {
  default = "183.83.67.89/32"
}



> plan and apply
> check VPC is created in AWS


3. Creating SG - SG-tf
---------------------

resource "aws_security_group" "dove_stack_sg" {
  vpc_id      = aws_vpc.dove.id
  name        = "dove-stack-sg"
  description = "Sec Grp for dove ssh"
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = [var.MYIP]
  }
  tags = {
    Name = "allow-ssh"
  }
}

> terraform plan # to check and confirm
> terraform apply # deploy
> check in AWS


4. Creating Backed state to store all config related data
---------------------------------------------------------

backend.tf
----------

terraform {
  backend "s3" {
    bucket = "terra-state-dove"
    key    = "terraform/backend_exercise6"
    region = "us-east-2"
  }
}

5. web.sh file
--------------

web.tf
------

#!/bin/bash
yum install wget unzip httpd -y
systemctl start httpd
systemctl enable httpd
wget https://www.tooplate.com/zip-templates/2117_infinite_loop.zip
unzip -o 2117_infinite_loop.zip
cp -r 2117_infinite_loop/* /var/www/html/
systemctl restart httpd



4. Creating an Instance
------------------------

instance.tf
-----------


resource "aws_key_pair" "dove-key" {                # make sure you have public and private keys in this folder, else create it and add it here
  key_name   = "dovekey"
  public_key = file(var.PUB_KEY)
}

resource "aws_instance" "dove-web" {
  ami                    = var.AMIS[var.REGION]
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.dove-pub-1.id
  key_name               = aws_key_pair.dove-key.key_name
  vpc_security_group_ids = [aws_security_group.dove_stack_sg.id]
  tags = {
    Name = "my-dove"
  }
}

resource "aws_ebs_volume" "vol_4_dove" {
  availability_zone = var.ZONE1
  size              = 3
  tags = {
    Name = "extr-vol-4-dove"
  }
}

resource "aws_volume_attachment" "atch_vol_dove" {
  device_name = "/dev/xvdh"
  volume_id   = aws_ebs_volume.vol_4_dove.id
  instance_id = aws_instance.dove-web.id      # Resource_Type.Resource_Name.Attribute(key/name/id)
}

output "PublicIP" {
  value = aws_instance.dove-web.public_ip
}


> terraform validate
> terraform plan
> terraform apply
> check in AWS 


# clean-up

> terraform destroy :)







