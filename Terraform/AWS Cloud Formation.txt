AWS Cloud Formation
-------------------


Check out AWS clean documentation:
https://docs.aws.amazon.com/cloudformation/?icmpid=docs_homepage_mgmtgov

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html


++++++++++++++++++++++++++++++++++++++++++++++++

1. firstExample.yaml
----------------------

Resources:
  MyInstanc:    --> logical id
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-074dc0a6f6c764218
      
      
2. update-example.yaml
------------------------

> here we are updating existing FirstExample.yaml file to add tag/instance name
> select stack -> update -> Replace current Template -> upload -> create

Resources:
  MyInstanc:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-074dc0a6f6c764218
      Tags: 
        - Key: "Name"                      -> take care about notation and cases
          Value: "MyFirstInstance"
          
          
> Once done
Check "Change Preview Set" to track what changes made and want to proceed with change or not
this is similar to "Terraform plan"


+++++++++++++++++++++++++++++++++++++++

3. Intrensic function
 --------------------
 
 https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-join.html
 
 intrensic.yaml
 
 Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-074dc0a6f6c764218
      Tags: 
        - Key: "Name"
          Value: !Join ["-",[my,instance,from,cloudFormation]]
          
          
          
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CHANGE SET
----------

Create fresh new stack:

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-074dc0a6f6c764218
      Tags: 
        - Key: "Name"
          Value: !Join ["-",[lets,see,changeset]]
      
Now we will create change set:

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-074dc0a6f6c764218
      Tags: 
        - Key: "Name"
          Value: "ChangeSet"


Check for Replacement status in change set -> which will be either True or false
-> if true -> will delete existing resource and creates new

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=

Ref function
------------

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html

ref.yaml

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-074dc0a6f6c764218
      Tags: 
        - Key: "Name"
          Value: !Join
            - " "
            - - "My instance in"
              - !Ref AWS::Region    ->  Psedo Parameter :
                                                          https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html
              

Resource created:

Instance: i-08cc50453adeebbb3 (My instance in ap-south-1)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Multi resource
---------------

multi.yaml

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-074dc0a6f6c764218
      Tags: 
        - Key: "Name"
          Value: !Join ["-",[my,instance,from,cloudFormation,with,SG]]
      SecurityGroups:
        - !Ref VprofileSG       - referecing SG resource from here

  VprofileSG:                                     -- name of resource : refer : https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-
                                                                               properties-ec2-security-group-rule.html#cfn-ec2-security-group-rule-ipprotocol
    Type: AWS::EC2::SecurityGroup
    Properties: 
     GroupDescription: "Allow ssh and http from my IP"
     GroupName: "Uday group"
     SecurityGroupIngress: 
     - IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       CidrIp: 0.0.0.0/0
     - IpProtocol: tcp
       FromPort: 22
       ToPort: 22
       CidrIp: 49.37.241.38/32
   
  
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Mappings and Pseduo Parameters:
------------------------------

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/mappings-section-structure.html
        
Mappings_Psedo.yaml


Mappings:  -> keyword
  AMIRegionMap:  -> user defined
    us-east-1:   -> regions
      "AMI": "ami-0b0dcb5067f052a63"  -. there AMI ids
    us-east-2: 
      "AMI": "ami-0beaa649c482330f7"


Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap   -> Mappings- GO to AMIRegionMap and then check Psedo value(region) and pull its respective region AMi ID
       - AMIRegionMap
       - !Ref AWS::Region
       - AMI
      Tags: 
        - Key: "Name"
          Value: !Join ["-",[my,instance,from,cloudFormation,with,SG]]
      SecurityGroups:
        - !Ref VprofileSG

  VprofileSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
     GroupDescription: "Allow ssh and http from my IP"
     GroupName: "Uday group"   -> name in SG
     SecurityGroupIngress: 
     - IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       CidrIp: 0.0.0.0/0
     - IpProtocol: tcp
       FromPort: 22
       ToPort: 22
       CidrIp: 49.37.241.38/32  -> My IP
   
 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 Parameters:
 ----------
 
 https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
 
 
 parameter.yaml
 
 
 Parameters:
  NameofService:  #Logical Id
    Description: "The name of the service this stack is used for."
    Type: String
  InstanceTypeParameter:  # Logical Id
    Type: String
    Default: t2.micro
    AllowedValues:   # gives list
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  KeyName:                    # Logical ID
    Description: Name of EC2 loginkey
    Type: AWS::EC2::KeyPair::KeyName   # using Psedo parameter as a list




Mappings: 
  AMIRegionMap: 
    ap-south-1: 
      "AMI": "ami-074dc0a6f6c764218"
    ap-south-2: 
      "AMI": "ami-0beaa649c482330f7"


Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref KeyName
      ImageId: !FindInMap
       - AMIRegionMap
       - !Ref AWS::Region
       - AMI
      Tags: 
        - Key: "Name"
          Value: !Ref NameofService   # ref function to refere NameofService Parameter
      SecurityGroups:
        - !Ref VprofileSG

  VprofileSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
     GroupDescription: "Allow ssh and http from my IP"
     GroupName: "Uday group"
     SecurityGroupIngress: 
     - IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       CidrIp: 0.0.0.0/0
     - IpProtocol: tcp
       FromPort: 22
       ToPort: 22
       CidrIp: 49.37.241.38/32
   
 
 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 OUTPUTS
 -------
 
 
 https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
 
 
 Parameters:
  NameofService:  #Logical Id
    Description: "The name of the service this stack is used for."
    Type: String
  InstanceTypeParameter:  # Logical Id
    Type: String
    Default: t2.micro
    AllowedValues:   # gives list
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  KeyName:                    # Logical ID
    Description: Name of EC2 loginkey
    Type: AWS::EC2::KeyPair::KeyName   # using Psedo parameter as a list




Mappings: 
  AMIRegionMap: 
    ap-south-1: 
      "AMI": "ami-074dc0a6f6c764218"
    ap-south-2: 
      "AMI": "ami-0beaa649c482330f7"


Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref KeyName
      ImageId: !FindInMap
       - AMIRegionMap
       - !Ref AWS::Region
       - AMI
      Tags: 
        - Key: "Name"
          Value: !Ref NameofService
      SecurityGroups:
        - !Ref VprofileSG

  VprofileSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
     GroupDescription: "Allow ssh and http from my IP"
     GroupName: "Uday group"
     SecurityGroupIngress: 
     - IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       CidrIp: 0.0.0.0/0
     - IpProtocol: tcp
       FromPort: 22
       ToPort: 22
       CidrIp: 49.37.241.38/32

Outputs:
  PrintingInfo:   # logical id
    Value: !GetAtt   # this functions holds only 1 parameter?
        - MyInstance   # Logical ID
        - PublicDnsName   # and its paramater we want to print.
        # we can get the attribute name here:  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html
        # search with attribute you want to print
      #  - PublicIp
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 Init - Metadata
 ---------------
This is something like "web.sh" we used in Terraform, like giving some task while instance is getting booted.
We have many more options here.....
 
 https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html
 
https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html

----------------------------------------------->
Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          packages: 
            :
          groups: 
            :
          users: 
            :
          sources: 
            :
          files: 
            :
          commands: 
            :
          services: 
            :
    Properties:
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref KeyName
      ImageId: !FindInMap
       - AMIRegionMap
       - !Ref AWS::Region
       - AMI
      Tags: 
        - Key: "Name"
          Value: !Ref NameofService
      SecurityGroups:
        - !Ref VprofileSG

---------------------------------------------------->
Init.yaml

Parameters:
  NameofService:  #Logical Id
    Description: "The name of the service this stack is used for."
    Type: String
  InstanceTypeParameter:  # Logical Id
    Type: String
    Default: t2.micro
    AllowedValues:   # gives list
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  KeyName:                    # Logical ID
    Description: Name of EC2 loginkey
    Type: AWS::EC2::KeyPair::KeyName   # using Psedo parameter as a list




Mappings: 
  AMIRegionMap: 
    ap-south-1: 
      "AMI": "ami-074dc0a6f6c764218"
    ap-south-2: 
      "AMI": "ami-0beaa649c482330f7"


Resources:
  WebServer:
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        config: 
          packages: 
            yum: 
              php: []
              https: []
              wget: []
              unzip: []
              git: []
          commands:
            test:
              command: "wget https://www.tooplate.com/zip-templates/2119_gymso_fitness.zip && unzip 2119_gymso_fitness.zip && cp -r 2119_gymso_fitness/* /var/www/html/"
          files: 
              /var/www/html/heloo.html:
                content: !Sub |
                  <!DOCTYPE html>
                  <html>
                  <body>

                  <h1>Welcome to CloudFormation. </h1>
                  <p> this site is deployed by Cloud Formation. </p>

                  </body>
                  </html>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true

    Properties:
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref KeyName
      ImageId: !FindInMap
       - AMIRegionMap
       - !Ref AWS::Region
       - AMI
      Tags: 
        - Key: "Name"
          Value: !Ref NameofService
      SecurityGroups:
        - !Ref VprofileSG
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe
            # Ensure AWS CFN Bootstrap is the latest
            yum install -y aws -cfn-bootstrap
            # Install the filea and packagess from metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer  --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}

  VprofileSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
     GroupDescription: "Allow ssh and http from my IP"
     GroupName: "Uday group"
     SecurityGroupIngress: 
     - IpProtocol: tcp
       FromPort: 80
       ToPort: 80
       CidrIp: 0.0.0.0/0
     - IpProtocol: tcp
       FromPort: 22
       ToPort: 22
       CidrIp: 49.37.241.38/32

Outputs:
  PrintingInfo:
    Value: !GetAtt   # this functions holds only 1 parameter?
        - WebServer   # Logical ID
        - PublicDnsName   # and its paramater we want to print 
      #  - PublicIp
      
      
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 
 
 
 
 
 
 
 
 
 
