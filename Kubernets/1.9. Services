
Services are scoped across kuberneters and are not restricted to any cluster/node/pod/master, it will be everywhere


NODEPORT
--------

> host port as we do in docker 
> used for nonprod
> to expose pod to internet
> NodePort range - 30000 - 32767

internet -> node ip:<nodeport> -> SERVICE (lable selector) -> routes to POD equals to lable selector (same port as target port) -> container

nodeport : is the external node to access internal node (service node)

say x.x.x.x:30001  => mapped to  => SERVICE IP and port(service)   => mapped to backend port or target port
internal port will be container image/container port
for nginx -> 80
for tomcat -> 8080

> lable selector

1.

[root@ip-172-31-12-224 services]# cat nginx-pod.yaml
apiVersion: v1
kind: Pod
metadata:
#namespace: uday-demo
 name: nginx-data
 labels:
   app: nginx-data1
spec:
  containers:
    - name: nginxcontainer
      image: nginx
      ports:
        - name: nginx-port
          containerPort: 80

kubectl create -f <object name>

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[root@ip-172-31-12-224 services]# cat nginx-nodeport.yaml

apiVersion: v1
kind: Service    -> kind is service
metadata:
  name: helloworld-service
spec:
  type: NodePort
  ports:
  - port: 8090              # Mandatory field   # internal front end port , if we didn't mention target port -> this Port number will be directly used 
    targetPort: nginx-port  # very important target node , should be same as container port, we used port name here
    nodePort: 30001         # external front end nodeport to access from internet, valid range (30000 -32767),if didnt mention it will be automatically assigned
  #  protocol: TCP
  selector:
    app: nginx-data1        # selector to connect service to POD
  
# Working:
 nodeip:30001  ->  service_internal_ip:8090  ->  containerport:80

 kubectl create -f nginx-nodeport.yaml
 
[root@ip-172-31-12-224 services]# kubectl get svc

NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
helloworld-service   NodePort    10.101.194.171   <none>        8090:30001/TCP   3m31s   -> the one we created 
kubernetes           ClusterIP   10.96.0.1        <none>        443/TCP          5d1h


kubectl service <service_name> --url   

[root@ip-172-31-12-224 services]# kubectl describe svc helloworld-service

Name:                     helloworld-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=nginx-data1
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.101.194.171
IPs:                      10.101.194.171
Port:                     <unset>  8090/TCP
TargetPort:               nginx-port/TCP
NodePort:                 <unset>  30001/TCP
Endpoints:                192.168.7.86:80     -> this is the conainer Ip with Port
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
    
[root@ip-172-31-12-224 services]# kubectl describe pod | grep IP

Annotations:  cni.projectcalico.org/podIP: 192.168.7.86/32
IP:           192.168.7.86          -> you can verify here
IPs:
  IP:  192.168.7.86
Annotations:               cni.projectcalico.org/podIP: 192.168.154.142/32
IP:                        192.168.154.142
IPs:
  IP:           192.168.154.142


To access from internet

<workernode_IP>:30001  

To delete service:

kubectl delete svc helloworld-service


2.

[root@ip-172-31-11-76 ~]# kubectl create deployment nginx1 --image=nginx
deployment.apps/nginx1 created

[root@ip-172-31-11-76 ~]# kubectl get deploy
NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
kubernetes-dashboard    1/1     1            1           46h
nginx1                  1/1     1            1           9s
postgres-deployment     0/0     0            0           19h
redis-deployment        0/0     0            0           19h
result-app-deployment   0/0     0            0           19h
worker-app-deployment   0/0     0            0           19h



[root@ip-172-31-11-76 ~]# kubectl expose deploy nginx1 --type=NodePort --port=80
service/nginx1 exposed

[root@ip-172-31-11-76 ~]# kubectl get svc
NAME                   TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE
db                     ClusterIP      10.106.79.195   <none>        5432/TCP        19h
kubernetes             ClusterIP      10.96.0.1       <none>        443/TCP         3d
kubernetes-dashboard   NodePort       10.97.225.221   <none>        443:30226/TCP   46h
nginx1                 NodePort       10.100.145.32   <none>        80:30547/TCP    7s # this one
redis                  ClusterIP      10.109.11.114   <none>        6379/TCP        19h
result-service         LoadBalancer   10.96.144.181   <pending>     80:32254/TCP    19h
service                NodePort       10.103.58.221   <none>        80:30003/TCP    16h
voting-service         LoadBalancer   10.96.6.83      <pending>     80:32684/TCP    19h


[root@ip-172-31-11-76 ~]# kubectl get pods -o wide
NAME                                    READY   STATUS    RESTARTS   AGE   IP                NODE      NOMINATED NODE   READINESS GATES
kubernetes-dashboard-76849b5669-mfbpx   1/1     Running   1          19h   192.168.189.100   worker2   <none>           <none>
nginx1-b97c459f7-ht7xh                  1/1     Running   0          93s   192.168.235.177   worker1   <none>           <none>

# access through nodeport

[root@ip-172-31-11-76 ~]# kubectl describe svc nginx1
Name:                     nginx1
Namespace:                default
Labels:                   app=nginx1
Annotations:              <none>
Selector:                 app=nginx1
Type:                     NodePort
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.100.145.32
IPs:                      10.100.145.32
Port:                     <unset>  80/TCP
TargetPort:               80/TCP
NodePort:                 <unset>  30547/TCP
Endpoints:                192.168.235.177:80
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>


========================================================================

CLUSTER IP
----------

> internal communication

> default one created for a cluster

#cluster-ip.yaml

# if we dint mention type, by default Cluster IP will be created

apiVersion: v1
kind: Service
metadata:
 name: app-service
spec:
 type: ClusterIP
 ports:
 - targetPort: 8080
   port: 8080
   protocol: TCP
selector:
 app: backend

=========================================================================

LOAD BALANCER
-------------

> this actaully creates ELB in AWS and maps to node port
> used to expose pod to internet 
> used mostly for prod activities
> we will have one IP here , as it avaoids problem when we have multiple replicas of pod across nodes , results in multiple URL with NodePort service


[root@ip-172-31-12-224 services]# cat nginx-LB.yaml

apiVersion: v1
kind: Service
metadata:
  name: helloworld-lbservice   # name should be lower case
spec:
  type: LoadBalancer
  ports:
  - port: 80                              # load balancer external port
    targetPort: nginx-port                # targer port name
   #  protocol: TCP
  selector:
    app: nginx-data1
     
  
  
 kubectl create -f nginx-LB.yaml
 
 [root@ip-172-31-12-224 services]# kubectl get svc
 
NAME                   TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
helloworld-lbservice   LoadBalancer   10.110.138.145   <pending>     80:31592/TCP   102s
kubernetes             ClusterIP      10.96.0.1        <none>        443/TCP        5d1h


Clean up
-------------

kubectl delete pod/nginx-data svc/helloworld-lbservice







