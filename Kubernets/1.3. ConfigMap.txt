Overview: Very Important
---------

Collection of variable and injecting them to POD

> Environmental variable
> files from volume
> there are 4 differecnt ways to move variables/confi_files to inside container

There are four different ways that you can use a ConfigMap to configure a container inside a Pod:

  >  Inside a container command and args
  >  Environment variables for a container
  >  Add a file in read-only volume, for the application to read
  >  Write code to run inside the Pod that uses the Kubernetes API to read a ConfigMap


=======================================================================================================

1. Creating Configmap from "multiple files" & Consuming it inside Pod from "volumes" 

   1a. Create Configmap "nginx-configmap-vol" from "multiple files"
   1b. Consume "nginx-configmap-vol" configmap inside Pod from "volumes" 
   1c. Create | Display | Validate

3. Cleanup

   3a. Delete configmaps
   3b. Delete pods
   3c. Validate

*************************************************************************************************************************************************

1. Creating Configmap from "multiple files" & Consuming it inside Pod from "volumes" 


1a.  Create Configmap "nginx-configmap-vol" from "multiple files":
------------------------------------------------------------------
echo -n 'Non-sensitive data inside file-1' > file-1.txt  
echo -n 'Non-sensitive data inside file-2' > file-2.txt

kubectl create configmap nginx-configmap-vol --from-file=file-1.txt --from-file=file-2.txt  # imperative
configmap/nginx-configmap-vol created


kubectl get configmaps  or kubectl get cm

NAME                  DATA   AGE
kube-root-ca.crt      1      19h
nginx-configmap-vol   2      31s

kubectl get cm <config_map_name> -o yaml

apiVersion: v1
data:
  file-1.txt: Non-sensitive data inside file-1
  file-2.txt: Non-sensitive data inside file-2
kind: ConfigMap
metadata:
  creationTimestamp: "2022-12-27T07:01:12Z"
  name: nginx-configmap-vol
  namespace: default
  resourceVersion: "11548"
  uid: 911f7632-7370-4249-a174-01065343d5d0


kubectl describe configmaps nginx-configmap-vol

Name:         nginx-configmap-vol
Namespace:    default
Labels:       <none>
Annotations:  <none>

Data
====
file-1.txt:
----
Non-sensitive data inside file-1
file-2.txt:
----
Non-sensitive data inside file-2
Events:  <none>


==========================================================

1b.  Consume above "nginx-configmap-vol" configmap inside Pod from "volumes" 
---------------------------------------------------------------------------

#nginx-pod-configmap-vol.yaml

apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-configmap-vol
spec:
  containers:
  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: test-vol
      mountPath: "/etc/non-sensitive-data"
      readOnly: true
  volumes:       # here we are mapping config file from host to containers through volumes
    - name: test-vol
      configMap:
        name: nginx-configmap-vol   # name of the configmap created and in configmap we use files to transfer , we use folder/directory in hostpath under                                          # volumes
        items:
        - key: file-1.txt
          path: file-a.txt
        - key: file-2.txt
          path: file-b.txt



==========================================================

1c. Create | Display | Validate:
--------------------------------

# Create
kubectl create -f nginx-pod-configmap-vol.yaml

# Display
kubectl get pods

kubectl get configmaps

NAME                  DATA   AGE
kube-root-ca.crt      1      20h     > default one
nginx-configmap-vol   2      4m23s   > data mean 2 files


kubectl describe pod nginx-pod-configmap-vol


# Validate from "inside" the pod
kubectl exec nginx-pod-configmap-vol -it /bin/sh
cd /etc/non-sensitive-data
ls 
cat Non-sensitive data inside file-1.txt
cat password.txt
exit

(OR)

# Validate from "outside" the pod
kubectl exec nginx-pod-configmap-vol ls /etc/non-sensitive-data
kubectl exec nginx-pod-configmap-vol cat /etc/non-sensitive-data/file-a.txt
kubectl exec nginx-pod-configmap-vol cat /etc/non-sensitive-data/file-b.txt


3. Cleanup

# Delete configmaps
kubectl delete configmaps nginx-configmap-vol

# Delete pods
kubectl delete pods nginx-pod-configmap-vol

# Validate
kubectl get pods
kubectl get configmaps


*************************************************************************************************************************************************
Udemy # Refer official documentation
-----
# to store files and configuration in one place
# to store variables in one place


# refer official doc
# Create COnfig Map  # here we have 4 keys
vi game-demo.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  player_initial_lives: "3"                                                   # property-like keys; each key maps to a simple value
  ui_properties_file_name: "user-interface.properties"
  game.properties: |                                                          # file-like keys
    enemy.types=aliens,monsters
    player.maximum-lives=5    
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true


kubectl apply -f game-demo.yml
kubectl get cm

vim readcmpod.yaml


apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      image: alpine
      command: ["sleep", "3600"]
      env:           # Define the environment variable
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here from the key name in the ConfigMap.
                                 
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: player_initial_lives # The key to fetch.
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: game-demo
              key: ui_properties_file_name
      volumeMounts:
      - name: config  # volume name
        mountPath: "/config"
        readOnly: true
  volumes:
    # You set volumes at the Pod level, then mount them into containers inside that Pod
    - name: config
      configMap:                                # Provide the name of the ConfigMap you want to mount.
                                                               
        name: game-demo
        # An array of keys from the ConfigMap to create as files
        items:
        - key: "game.properties"
          path: "game.properties"
        - key: "user-interface.properties"
          path: "user-interface.properties"



kubectl apply -f readcmpod.yaml

kubectl get pod

kubectl exec --stdin --tty configmap-demo-pod -- /bin/sh  # alpine is shell so /bin/sh

cd /config/
ls # you can view the variables/keys along with values , injecting values through volume -> config maps

echo $PLAYER_INITIAL_LIVES
echo $PLAYER_INITIAL_LIVES

exit

=========================================


