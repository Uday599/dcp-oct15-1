Kube-Master(Controller)
	Kube-Worker1
	Kube-Worker2
	
	
WE ARE SETTING UP KUBERNETES USING - KUBEADM
-------------------------------------------
	
Add Port: 0 - 65535  -- Open this posts in inbound rule of security group 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
On Both Master and Worker Nodes:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sudo -i

yum update -y

swapoff -a
#The Kubernetes scheduler determines the best available node on which to deploy newly created pods. If memory swapping is allowed to occur on a host system, this can lead to performance and stability issues within Kubernetes.

setenforce 0
#Disabling the SElinux makes all containers can easily access host filesystem.

yum install docker -y

systemctl enable docker 
systemctl start docker

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=0
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*
EOF


cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system

> sysctl is used to modify kernel parameters at runtime. The parameters available are those listed under /proc/sys/. Procfs is required for sysctl support in Linux. You can use sysctl to both read and write sysctl data.

yum install -y kubeadm-1.21.3 kubelet-1.21.3 kubectl-1.21.3 --disableexcludes=kubernetes 

systemctl enable kubelet 
systemctl start kubelet

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Only on Master Node:
~~~~~~~~~~~~~~~~~~~~~

sudo kubeadm init --apiserver-advertise-address=172.31.12.224 --pod-network-cidr=192.168.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem

Above command : here we are initializing out one of the VM as Master - Private IP , POD CIDR is defined , ignore is to neglect any runtime error like CPU error and Memory and treat them as warning

[WARNING NumCPU]: the number of available CPUs 1 is less than the required 2
[WARNING Mem]: the system RAM (964 MB) is less than the minimum 1700 MB


--------------------------------

mkdir -p $HOME/.kube   -> this is in root directory
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config   -> we are just copying the repo file which we installed earlier(upper part) to required path
sudo chown $(id -u):$(id -g) $HOME/.kube/config  -> changing the ownership


#export KUBECONFIG=/etc/kubernetes/kubelet.conf

#We need to install a flannel network plugin to run coredns to start pod network communication.
# we have Kubeproxy for networking in PODS
#FLANNER - pluggin for network adapter

sudo kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml 
sudo kubectl apply -f https://docs.projectcalico.org/v3.8/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml 

Test the configuration ::

kubectl get pods --all-namespaces

kubectl get nodes

kubectl describe nodes

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute the below commmand in Worker Nodes, to join all the worker nodes with Master :
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

> execute below command in every worker node to connect to master
> you can verify by kubectl get nodes -> to view the nodes
> Below command should be copied while initializing kubeadm in master (check upper part :)

> execute below command to get join token in kubemaster

kubeadm token create --print-join-command

Sample:

kubeadm join 172.31.13.1:6443 --token db44h7.mld38h3otcgpgs6s --discovery-token-ca-cert-hash sha256:35e4c6d99284116035840e1900712cf00c1850ceaac8318c78164f3ea9183c86




Where will Namespace come into picture - cluster?

--------------Sunday 13 Nov intro --------------

KUBECTL SYNTAX
--------------

kubectl <command> <type> <name> <flags>

Typs -> objects like pods/deployments/replicaset many more
command -> get create descrive many more
flag is optional
name is name of the object





> kubectl get pods --all-namespace
