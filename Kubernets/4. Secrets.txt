*************************************************************************************************************************************************

Overview:
---------
1. Create Secret using "kubectl" & Consuming it from "volumes" inside Pod

   1a. Create secret "nginx-secret-vol" using "Kubectl"
   1b. Consume "nginx-secret-vol" from "volumes" inside Pod
   1c. Create | Display | Validate

3. Cleanup

   3a. Delete secrets
   3b. Delete pods
   3c. Validate

*************************************************************************************************************************************************

# 1. Creating Secret using Kubectl & Consuming it from "volumes" inside Pod


1a. Creating secret using "Kubectl":
------------------------------------
echo -n 'admin' > username.txt
echo -n 'pa$$w00rd' > password.txt

kubectl create secret generic nginx-secret-vol --from-file=username.txt --from-file=password.txt  # imperative

# rm -f username.txt password.txt

kubectl get secrets
kubectl describe secrets nginx-secret-vol

Name:         nginx-secret-vol
Namespace:    default
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password.txt:  9 bytes   # we cant see the data , it can be seen only inside the container
username.txt:  5 bytes


==========================================================

1b. Consuming "nginx-secret-vol" from "volumes" inside Pod
--------------------------------------------------------

#nginx-pod-secret-vol.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-secret-vol
spec:
  containers:
  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: test-vol
      mountPath: "/etc/confidential"
      readOnly: true
  volumes:    -- loading secrets into containers and this will be accessable only inside the container not outside , through ConfigMap we can access both                   -- inside and outside
  - name: test-vol
    secret:
      secretName: nginx-secret-vol

==========================================================

1c. Create | Display | Validate:
--------------------------------

# Create
kubectl create -f nginx-pod-secret-vol.yaml

# Display
kubectl get pods
kubectl get secrets
kubectl describe pod nginx-pod-secret-vol
> if we describe we wont see actual data present in the file, we can see only file names.
> but if in case of ConfigMap we are able to see the files along with the actual data.

# Validate from "inside" the pod
kubectl exec nginx-pod-secret-vol -it /bin/sh

[root@ip-172-31-11-76 secrets]# kubectl exec nginx-pod-secret-vol -it /bin/sh

kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
# cd /etc/confidential
# ls
password.txt  username.txt
# cat password.txt
pa$$w00rd            # we are able to see the content inside the container


(OR)

# Validate from "outside" the pod, without loggin inside container

kubectl exec nginx-pod-secret-vol ls /etc/confidential
kubectl exec nginx-pod-secret-vol cat /etc/confidential/username.txt
kubectl exec nginx-pod-secret-vol cat /etc/confidential/password.txt


3. Cleanup

# Delete secrets
kubectl delete secrets nginx-secret-vol

# Delete pods
kubectl delete pods nginx-pod-secret-vol

# Validate
kubectl get pods
kubectl get secrets


************************************************************************************************************************************************* 
Udemy 
-----
# declaratively creating secrets

# Encode text
echo -n "admin" | base64
echo -n "mysecretpass" | base64

# Create Secret config.yml file

vim mysecret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
data:
  username: YWRtaW4=                # keyname: value
  password: bXlzZWNyZXRwYXNz
type: Opaque


kubectl create -f mysecret.yaml

# Create Pod to read secret keys

vim readsecret.yaml
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: mycontainer
    image: redis
    env:
      - name: SECRET_USERNAME
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: username
            optional: false # same as default; "mysecret" must exist
                            # and include a key named "username"
      - name: SECRET_PASSWORD
        valueFrom:
          secretKeyRef:
            name: mysecret
            key: password
            optional: false # same as default; "mysecret" must exist
                            # and include a key named "password"
  restartPolicy: Never


kubectl create -f readsecret.yaml
kubectl get pod

# Login to Pod echo print variables
kubectl exec --stdin --tty secret-env-pod -- /bin/bash
echo $SECRET_USERNAME
echo $SECRET_PASSWORD



